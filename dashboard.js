// ==========================================
// FITNESS TAKVƒ∞Mƒ∞ - SADELE≈ûTƒ∞Rƒ∞LMƒ∞≈û VERSƒ∞YON
// ==========================================

// Egzersiz veritabanƒ±nƒ± exercises.json'dan y√ºkle
let exerciseDB = {};

// Gemini API yapƒ±landƒ±rmasƒ±
const GEMINI_CONFIG = {
    endpoint: 'https://generativelanguage.googleapis.com/v1beta/models/gemini-1.5-flash:generateContent',
    key: 'AIzaSyB1wa6-CS079N_s8kH-t7VH4nbK-ccaPzg'
};
// Mevcut kodunuzun ba≈üƒ±nda, GEMINI_CONFIG'den sonra bu konfig√ºrasyonu ekleyin:
const YOUTUBE_CONFIG = {
    enabled: true, // API key olmadƒ±ƒüƒ± i√ßin false
    apiKey: 'AIzaSyC5-ngZj5C5SG3FvNmEjmWORKH_Hl9LjW8\n', // Buraya ger√ßek API key gelecek
    searchTerms: {
        'bench press': 'bench press proper form technique',
        'squat': 'squat proper form technique',
        'deadlift': 'deadlift proper form technique',
        // Daha fazla √∂zel terim eklenebilir
    }
};
// YouTube Video Y√∂neticisi
class YouTubeVideoManager {
    constructor() {
        this.cache = {};
        this.fallbackVideos = {
            // Pop√ºler egzersizler i√ßin √∂nceden tanƒ±mlanmƒ±≈ü video ID'leri
            'push-up': 'IODxDxX7oi4',
            'squat': 'YaXPRqUwItQ',
            'plank': '5ER5Of4NbEg',
            'pull-up': 'eGo4IYlbE5g',
            'bench press': 'rT7DgCr-3pg',
            'deadlift': 'VWixOpqJXh0',
            'shoulder press': 'qEwKCR5JCog',
            'bicep curl': 'ykJmrZ5v0Oo',
            'tricep dips': 'yN6Q1UI_xkE',
            'lunges': 'MxfTNXSFiYI'
        };
    }

    async findExerciseVideo(exerciseName, exercise = null) {
        const cacheKey = exerciseName.toLowerCase();

        // √ñnbellekten kontrol et
        if (this.cache[cacheKey]) {
            return this.cache[cacheKey];
        }

        try {
            // 1. Egzersizin kendi videoKey'ini kullan
            let searchQuery = exerciseName;
            if (exercise && exercise.videoKey) {
                searchQuery = exercise.videoKey;
            }

            // 2. YouTube API ile arama yap
            if (YOUTUBE_CONFIG.enabled && YOUTUBE_CONFIG.apiKey && !YOUTUBE_CONFIG.apiKey.includes('YOUR_')) {
                const apiResult = await this.searchYouTubeAPI(searchQuery);
                if (apiResult) {
                    this.cache[cacheKey] = apiResult;
                    return apiResult;
                }
            }

            // 3. Fallback videolar
            const fallbackVideo = this.getFallbackVideo(searchQuery);
            if (fallbackVideo) {
                this.cache[cacheKey] = fallbackVideo;
                return fallbackVideo;
            }

            // 4. Genel arama URL'si olu≈ütur
            const searchResult = this.createSearchURL(searchQuery);
            this.cache[cacheKey] = searchResult;
            return searchResult;

        } catch (error) {
            console.error('Video arama hatasƒ±:', error);
            return this.createSearchURL(exerciseName);
        }
    }

    async searchYouTubeAPI(searchQuery, exercise = null) {
        const finalQuery = this.createSearchQuery(searchQuery, exercise);

        // API key kontrol√º
        if (!YOUTUBE_CONFIG || !YOUTUBE_CONFIG.apiKey || YOUTUBE_CONFIG.apiKey.includes('YOUR_')) {
            throw new Error('YouTube API key not configured');
        }

        const url = `https://www.googleapis.com/youtube/v3/search?` +
            `part=snippet&maxResults=3&q=${encodeURIComponent(finalQuery)}&` +
            `type=video&videoDuration=medium&videoDefinition=high&` +
            `relevanceLanguage=en&safeSearch=strict&key=${YOUTUBE_CONFIG.apiKey}`;

        try {
            const response = await fetch(url);
            if (!response.ok) throw new Error('API yanƒ±t hatasƒ±');

            const data = await response.json();
            if (data.items && data.items.length > 0) {
                // En iyi videoyu se√ß (g√∂r√ºnt√ºlenme ve kalite bazƒ±nda)
                const bestVideo = data.items[0];
                return {
                    videoId: bestVideo.id.videoId,
                    title: bestVideo.snippet.title,
                    thumbnail: bestVideo.snippet.thumbnails.medium.url,
                    channelTitle: bestVideo.snippet.channelTitle,
                    embedUrl: `https://www.youtube.com/embed/${bestVideo.id.videoId}`,
                    watchUrl: `https://www.youtube.com/watch?v=${bestVideo.id.videoId}`,
                    source: 'api'
                };
            }
        } catch (error) {
            console.warn('YouTube API hatasƒ±:', error);
            return null;
        }
        return null;
    }

    getFallbackVideo(exerciseName) {
        const searchTerm = exerciseName.toLowerCase();

        // Tam e≈üle≈üme ara
        if (this.fallbackVideos[searchTerm]) {
            return this.createVideoObject(this.fallbackVideos[searchTerm], exerciseName, 'fallback');
        }

        // Kƒ±smi e≈üle≈üme ara
        for (const [key, videoId] of Object.entries(this.fallbackVideos)) {
            if (searchTerm.includes(key) || key.includes(searchTerm)) {
                return this.createVideoObject(videoId, exerciseName, 'fallback');
            }
        }

        return null;
    }

    createVideoObject(videoId, title, source = 'fallback') {
        return {
            videoId: videoId,
            title: `${title} - Exercise Tutorial`,
            thumbnail: `https://img.youtube.com/vi/${videoId}/mqdefault.jpg`,
            embedUrl: `https://www.youtube.com/embed/${videoId}`,
            watchUrl: `https://www.youtube.com/watch?v=${videoId}`,
            source: source
        };
    }

    createSearchQuery(exerciseName, exercise = null) {
        // Egzersizin kendi videoKey'ini kullan
        let cleanName = exerciseName.toLowerCase();
        if (exercise && exercise.videoKey) {
            cleanName = exercise.videoKey.toLowerCase();
        }

        cleanName = cleanName
            .replace(/[^\w\s]/g, '')
            .replace(/\s+/g, ' ')
            .trim();

        // √ñzel arama terimleri varsa kullan
        if (YOUTUBE_CONFIG && YOUTUBE_CONFIG.searchTerms && YOUTUBE_CONFIG.searchTerms[cleanName]) {
            return YOUTUBE_CONFIG.searchTerms[cleanName];
        }

        // Genel format
        return `${cleanName} exercise form technique tutorial proper`;
    }

    createSearchURL(exerciseName, exercise = null) {
        const searchQuery = this.createSearchQuery(exerciseName, exercise);
        return {
            videoId: null,
            title: `${exerciseName} - Video Arama`,
            searchUrl: `https://www.youtube.com/results?search_query=${encodeURIComponent(searchQuery)}`,
            watchUrl: `https://www.youtube.com/results?search_query=${encodeURIComponent(searchQuery)}`,
            source: 'search'
        };
    }
}

// Global YouTube manager
let youtubeManager = null;
let currentUser = null;
let selectedDay = null;
let currentProgram = [];
let currentExerciseContext = null;
let aiSuggestions = [];
let selectedSuggestions = [];
let aiProvider = null;

// AI Saƒülayƒ±cƒ± Sƒ±nƒ±fƒ±
class AIProvider {
    constructor() {
        this.lastUsedProvider = 'Sim√ºlasyon';
    }

    async generateResponse(userInput, exercise, userProfile) {
        // √ñnce Gemini'yi dene
        try {
            if (GEMINI_CONFIG.key && !GEMINI_CONFIG.key.includes('your-') && !GEMINI_CONFIG.key.includes('YOUR_')) {
                const response = await this.callGemini(userInput, exercise, userProfile);
                if (response) {
                    this.lastUsedProvider = 'Gemini';
                    return response;
                }
            }
        } catch (error) {
            console.warn('Gemini hatasƒ±:', error.message);
        }

        // Fallback sim√ºlasyon
        this.lastUsedProvider = 'Sim√ºlasyon';
        return this.fallbackResponse(userInput, exercise, userProfile);
    }

    async callGemini(userInput, exercise, userProfile) {
        const prompt = `Sen deneyimli bir fitness ko√ßusun. Kullanƒ±cƒ± profili: Tecr√ºbe: ${userProfile?.tecrube || 'orta'}, Kilo: ${userProfile?.kilo || 70}kg, Boy: ${userProfile?.boy || 170}cm. 

Mevcut egzersiz: ${exercise.isim}, Zorluk: ${exercise.zorluk}/5, Set: ${exercise.set}.

Kullanƒ±cƒ±nƒ±n sorusuna kƒ±sa, net bir ≈üekilde cevap ver. Eƒüer uygunsa, alternatif egzersizler de √∂ner. 

Mevcut kas grubu egzersizleri: ${this.getExercisesByMuscleGroup(exercise.kasGrubu).map(e => e.isim).join(', ')}`;

        console.log('üîÑ Gemini API √ßaƒürƒ±sƒ± yapƒ±lƒ±yor...');

        const response = await fetch(`${GEMINI_CONFIG.endpoint}?key=${GEMINI_CONFIG.key}`, {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify({
                contents: [{ parts: [{ text: `${prompt}\n\nKullanƒ±cƒ±: ${userInput}` }] }],
                generationConfig: { temperature: 0.7, maxOutputTokens: 500 }
            })
        });

        if (!response.ok) {
            const errorText = await response.text();
            console.error(`‚ùå Gemini hatasƒ±: ${response.status} - ${errorText}`);
            throw new Error(`Gemini error: ${response.status}`);
        }

        const data = await response.json();
        const text = data.candidates?.[0]?.content?.parts?.[0]?.text;

        if (!text) {
            console.error('‚ùå Gemini bo≈ü yanƒ±t', data);
            throw new Error('Gemini yanƒ±t vermedi');
        }

        console.log('‚úÖ Gemini ba≈üarƒ±lƒ±');

        return {
            response: text,
            suggestions: this.extractSuggestions(text, exercise)
        };
    }

    getExercisesByMuscleGroup(kasGrubu) {
        return exerciseDB[kasGrubu] || [];
    }

    extractSuggestions(text, currentExercise) {
        const suggestions = [];
        const exerciseNames = Object.values(exerciseDB).flat().map(e => e.isim.toLowerCase());

        // Metin i√ßinde egzersiz isimleri ara
        exerciseNames.forEach(name => {
            if (text.toLowerCase().includes(name)) {
                const exercise = Object.values(exerciseDB).flat().find(e => e.isim.toLowerCase() === name);
                if (exercise && !suggestions.some(s => s.id === exercise.id)) {
                    suggestions.push({
                        ...exercise,
                        reason: 'AI tarafƒ±ndan √∂nerilen alternatif'
                    });
                }
            }
        });

        // Eƒüer metin i√ßinde egzersiz bulunamazsa, mevcut egzersizle aynƒ± kas grubundan alternatifler √∂ner
        if (suggestions.length === 0 && currentExercise?.kasGrubu) {
            const kasGrubu = currentExercise.kasGrubu;

            if (kasGrubu && exerciseDB[kasGrubu]) {
                let filteredExercises = exerciseDB[kasGrubu].filter(e => e.id !== currentExercise.id);

                // Rastgele 3 tane se√ß
                shuffleArray(filteredExercises);
                suggestions.push(...filteredExercises.slice(0, 3).map(e => ({
                    ...e,
                    reason: 'Aynƒ± kas grubu alternatifi'
                })));
            }
        }

        return suggestions.slice(0, 3);
    }

    fallbackResponse(userInput, exercise, userProfile) {
        const input = userInput.toLowerCase();
        let response = '';
        let suggestions = [];

        if (input.includes('aƒürƒ±') || input.includes('acƒ±')) {
            response = `üö® Aƒürƒ± durumu - ${exercise.isim} Aƒürƒ± hissediyorsanƒ±z egzersizi durdurun, aƒüƒ±rlƒ±ƒüƒ± azaltƒ±n ve gerekirse doktora ba≈üvurun.`;
            suggestions = this.getSafeAlternatives(exercise);
        } else if (input.includes('kolay')) {
            response = `üöÄ Harika ilerleme - ${exercise.isim} Egzersiz kolay geliyorsa aƒüƒ±rlƒ±ƒüƒ± artƒ±rabilir veya daha zorlu varyasyonlarƒ± deneyebilirsiniz.`;
            suggestions = this.getHarderAlternatives(exercise);
        } else if (input.includes('zor')) {
            response = `üí™ Zorlanƒ±yorsunuz - ${exercise.isim} Bu normal! Aƒüƒ±rlƒ±ƒüƒ± azaltƒ±n, form odaklƒ± √ßalƒ±≈üƒ±n ve sabƒ±rlƒ± olun.`;
            suggestions = this.getEasierAlternatives(exercise);
        } else {
            response = `ü§ñ ${exercise.isim} Zorluk: ${'‚≠ê'.repeat(exercise.zorluk)} Set: ${exercise.set} Doƒüru form en √∂nemlidir, kontroll√º hareket yapƒ±n.`;
            suggestions = this.getGeneralAlternatives(exercise);
        }

        return { response, suggestions };
    }

    getSafeAlternatives(exercise) {
        const kasGrubu = exercise.kasGrubu;
        if (!kasGrubu) return [];

        return exerciseDB[kasGrubu]
            .filter(e => e.zorluk <= 2 && e.id !== exercise.id)
            .slice(0, 3)
            .map(e => ({
                ...e,
                reason: 'G√ºvenli ve d√º≈ü√ºk yoƒüunluk'
            }));
    }

    getHarderAlternatives(exercise) {
        const kasGrubu = exercise.kasGrubu;
        if (!kasGrubu) return [];

        return exerciseDB[kasGrubu]
            .filter(e => e.zorluk > exercise.zorluk)
            .slice(0, 3)
            .map(e => ({
                ...e,
                reason: `Zorluk seviyesi: ${e.zorluk}/5`
            }));
    }

    getEasierAlternatives(exercise) {
        const kasGrubu = exercise.kasGrubu;
        if (!kasGrubu) return [];

        return exerciseDB[kasGrubu]
            .filter(e => e.zorluk < exercise.zorluk)
            .slice(0, 3)
            .map(e => ({
                ...e,
                reason: `Ba≈ülangƒ±√ß seviyesi: ${e.zorluk}/5`
            }));
    }

    getGeneralAlternatives(exercise) {
        const kasGrubu = exercise.kasGrubu;
        if (!kasGrubu) return [];

        return exerciseDB[kasGrubu]
            .filter(e => e.id !== exercise.id)
            .sort(() => Math.random() - 0.5)
            .slice(0, 3)
            .map(e => ({
                ...e,
                reason: '√áe≈üitlilik i√ßin alternatif'
            }));
    }
}

// Egzersiz veritabanƒ±nƒ± y√ºkle
async function loadExerciseDatabase() {
    try {
        // exercises.json dosyasƒ±nƒ± y√ºkle
        const response = await fetch('exercises.json');
        if (!response.ok) {
            throw new Error('JSON dosyasƒ± y√ºklenemedi');
        }
        exerciseDB = await response.json();
        console.log('‚úÖ Egzersiz veritabanƒ± y√ºklendi');
    } catch (error) {
        console.warn('‚ö†Ô∏è JSON y√ºklenemedi, varsayƒ±lan veri kullanƒ±lƒ±yor');
        // Varsayƒ±lan egzersiz veritabanƒ±
        exerciseDB = {
            gogus: [
                { id: 1, isim: "Barbell Bench Press", zorluk: 3, set: "4x8-10", ekipman: "Barbell + Bench" },
                { id: 2, isim: "Dumbbell Press", zorluk: 2, set: "3x10-12", ekipman: "Dumbbell + Bench" },
                { id: 3, isim: "Push-up", zorluk: 1, set: "3x15-20", ekipman: "V√ºcut Aƒüƒ±rlƒ±ƒüƒ±" },
                { id: 4, isim: "Cable Fly", zorluk: 2, set: "3x12-15", ekipman: "Cable Makinesi" },
                { id: 5, isim: "Incline Dumbbell Press", zorluk: 2, set: "3x10-12", ekipman: "Dumbbell + ƒ∞ncline Bench" }
            ],
            sirt: [
                { id: 6, isim: "Pull-up", zorluk: 3, set: "4x6-8", ekipman: "Pull-up Bar" },
                { id: 7, isim: "Lat Pulldown", zorluk: 2, set: "3x10-12", ekipman: "Lat Pulldown Makinesi" },
                { id: 8, isim: "Barbell Row", zorluk: 3, set: "4x8-10", ekipman: "Barbell" },
                { id: 9, isim: "Cable Row", zorluk: 2, set: "3x12-15", ekipman: "Cable Makinesi" },
                { id: 10, isim: "T-Bar Row", zorluk: 2, set: "3x10-12", ekipman: "T-Bar/Barbell" }
            ],
            omuz: [
                { id: 11, isim: "Military Press", zorluk: 3, set: "4x8-10", ekipman: "Barbell" },
                { id: 12, isim: "Dumbbell Shoulder Press", zorluk: 2, set: "3x10-12", ekipman: "Dumbbell" },
                { id: 13, isim: "Lateral Raise", zorluk: 1, set: "3x12-15", ekipman: "Dumbbell" },
                { id: 14, isim: "Front Raise", zorluk: 1, set: "3x12-15", ekipman: "Dumbbell" },
                { id: 15, isim: "Face Pull", zorluk: 2, set: "3x15-20", ekipman: "Cable/Diren√ß Bandƒ±" }
            ],
            kol: [
                { id: 16, isim: "Barbell Curl", zorluk: 2, set: "3x10-12", ekipman: "Barbell" },
                { id: 17, isim: "Hammer Curl", zorluk: 1, set: "3x12-15", ekipman: "Dumbbell" },
                { id: 18, isim: "Tricep Dips", zorluk: 3, set: "3x8-10", ekipman: "Paralel Bar/Sandalye" },
                { id: 19, isim: "Cable Tricep Extension", zorluk: 2, set: "3x12-15", ekipman: "Cable Makinesi" },
                { id: 20, isim: "Preacher Curl", zorluk: 2, set: "3x10-12", ekipman: "Preacher Bench + Barbell" }
            ],
            bacak: [
                { id: 21, isim: "Squat", zorluk: 3, set: "4x8-10", ekipman: "Barbell + Squat Rack" },
                { id: 22, isim: "Leg Press", zorluk: 2, set: "3x10-12", ekipman: "Leg Press Makinesi" },
                { id: 23, isim: "Leg Extension", zorluk: 1, set: "3x12-15", ekipman: "Leg Extension Makinesi" },
                { id: 24, isim: "Romanian Deadlift", zorluk: 3, set: "4x8-10", ekipman: "Barbell/Dumbbell" },
                { id: 25, isim: "Leg Curl", zorluk: 1, set: "3x12-15", ekipman: "Leg Curl Makinesi" }
            ],
            core: [
                { id: 26, isim: "Plank", zorluk: 1, set: "3x60sn", ekipman: "V√ºcut Aƒüƒ±rlƒ±ƒüƒ±" },
                { id: 27, isim: "Crunch", zorluk: 1, set: "3x20-25", ekipman: "V√ºcut Aƒüƒ±rlƒ±ƒüƒ±" },
                { id: 28, isim: "Russian Twist", zorluk: 2, set: "3x15-20", ekipman: "V√ºcut Aƒüƒ±rlƒ±ƒüƒ±" },
                { id: 29, isim: "Leg Raise", zorluk: 2, set: "3x10-15", ekipman: "V√ºcut Aƒüƒ±rlƒ±ƒüƒ±" },
                { id: 30, isim: "Cable Crunch", zorluk: 2, set: "3x15-20", ekipman: "Cable Makinesi" }
            ]
        };
    }
}

// Ana ba≈ülatma fonksiyonu
window.onload = async function() {
    await loadExerciseDatabase();

    checkAuth();
    loadUserData();
    displayWeekView();
    displayCurrentWeek();
    initializeEventListeners();

    aiProvider = new AIProvider();
    youtubeManager = new YouTubeVideoManager(); // YouTube manager'ƒ± ba≈ülat

    setTimeout(() => {
        addQuickResponseButtons();
        optimizeMobileUI();
    }, 1000);
};

// Kimlik doƒürulama
function checkAuth() {
    const username = localStorage.getItem('currentUser');
    if (!username) {
        window.location.href = 'index.html';
        return;
    }
}

// Kullanƒ±cƒ± verilerini y√ºkle
function loadUserData() {
    const username = localStorage.getItem('currentUser');
    const users = JSON.parse(localStorage.getItem('users') || '[]');
    currentUser = users.find(u => u.username === username);

    if (!currentUser) {
        window.location.href = 'index.html';
        return;
    }

    document.getElementById('welcomeUser').textContent = `Ho≈ü geldin, ${username}!`;
    document.getElementById('username').textContent = username;
    document.getElementById('userKilo').textContent = currentUser.profile.kilo || '--';
    document.getElementById('userBoy').textContent = currentUser.profile.boy || '--';
    document.getElementById('userTecrube').textContent = currentUser.profile.tecrube || '--';
    document.getElementById('userGunSayisi').textContent = currentUser.profile.sporGunleri?.length || 0;
    document.getElementById('userAvatar').textContent = username.charAt(0).toUpperCase();

    if (!currentUser.takvim || currentUser.takvim.length === 0) {
        generateNewProgram();
    } else {
        currentProgram = currentUser.takvim;
    }
}

// Haftalƒ±k g√∂r√ºn√ºm
function displayWeekView() {
    const weekView = document.getElementById('weekView');
    const gunler = ['pazartesi', 'sali', 'carsamba', 'persembe', 'cuma', 'cumartesi', 'pazar'];
    const gunIsimleri = ['Pazartesi', 'Salƒ±', '√áar≈üamba', 'Per≈üembe', 'Cuma', 'Cumartesi', 'Pazar'];

    weekView.innerHTML = '';

    const today = new Date();
    const todayDayIndex = (today.getDay() + 6) % 7;

    gunler.forEach((gun, index) => {
        const dayCard = document.createElement('div');
        dayCard.className = 'day-card';

        if (index === todayDayIndex) {
            dayCard.classList.add('today');
        }

        const isWorkoutDay = currentUser.profile.sporGunleri && currentUser.profile.sporGunleri.includes(gun);
        if (!isWorkoutDay) {
            dayCard.classList.add('rest-day');
            dayCard.onclick = () => showToast('Bu bir dinlenme g√ºn√º');
        } else {
            dayCard.onclick = () => selectDay(gun);
        }

        const dayProgram = currentProgram.find(p => p.gun === gun);

        dayCard.innerHTML = `
            <div class="day-name">${gunIsimleri[index]}</div>
            ${isWorkoutDay ?
            (dayProgram ?
                `<div class="workout-type">${dayProgram.tip}</div>
                 <div class="exercise-count">${dayProgram.egzersizler.length} egzersiz</div>` :
                '<div class="exercise-count">Program bekleniyor</div>') :
            '<div class="exercise-count">Dinlenme</div>'}
        `;

        weekView.appendChild(dayCard);
    });
}

// Mevcut hafta
function displayCurrentWeek() {
    const today = new Date();
    const firstDay = new Date(today.setDate(today.getDate() - today.getDay() + 1));
    const lastDay = new Date(today.setDate(today.getDate() - today.getDay() + 7));

    const options = { day: 'numeric', month: 'long' };
    document.getElementById('currentWeek').textContent =
        `${firstDay.toLocaleDateString('tr-TR', options)} - ${lastDay.toLocaleDateString('tr-TR', options)}`;
}

// G√ºn se√ßimi
function selectDay(gun) {
    if (!currentUser.profile.sporGunleri.includes(gun)) return;

    selectedDay = gun;
    document.querySelectorAll('.day-card').forEach((card, index) => {
        const gunler = ['pazartesi', 'sali', 'carsamba', 'persembe', 'cuma', 'cumartesi', 'pazar'];
        if (gunler[index] === gun) {
            card.classList.add('active');
        } else {
            card.classList.remove('active');
        }
    });

    showBottomSheet(gun);
}

// Bottom sheet g√∂ster
function showBottomSheet(gun) {
    const bottomSheet = document.getElementById('bottomSheet');
    const backdrop = document.getElementById('backdrop');
    const title = document.getElementById('bottomSheetTitle');
    const content = document.getElementById('exerciseContent');

    const dayProgram = currentProgram.find(p => p.gun === gun);

    title.textContent = `${gun.charAt(0).toUpperCase() + gun.slice(1)} Antrenmanƒ±`;

    if (!dayProgram) {
        content.innerHTML = `
            <div class="empty-state">
                <div class="empty-state-icon">üìÖ</div>
                <p>Bu g√ºn i√ßin program olu≈üturulmamƒ±≈ü</p>
            </div>
        `;
    } else {
        const warmupExercises = generateWarmup(dayProgram.tip);

        content.innerHTML = `
            <div class="workout-header">
                <h4>${dayProgram.tip}</h4>
                <p>${dayProgram.egzersizler.length} egzersiz</p>
            </div>
            
            <div class="warmup-section">
                <h4 class="warmup-title">üî• Isƒ±nma Hareketleri</h4>
                <ul class="warmup-list">
                    ${warmupExercises.map(ex => `<li>${ex}</li>`).join('')}
                </ul>
            </div>
            
            <div class="exercise-list">
                ${dayProgram.egzersizler.map(egz => `
                    <div class="exercise-item">
                        <div class="exercise-info">
                            <div class="exercise-name">${egz.isim}</div>
                            <div class="exercise-sets">${egz.set}</div>
                        </div>
                        <div class="exercise-actions">
                            <button class="video-btn" onclick="showExerciseVideo(${egz.id}, '${egz.isim}')" title="Video ƒ∞zle">
                                <span class="video-icon">üé•</span>
                                Video
                            </button>
                            <button class="difficulty-btn" onclick="reportDifficult(${egz.id}, '${gun}')">
                                <span class="chat-icon">üí¨</span>
                                AI Ko√ß
                            </button>
                        </div>
                    </div>
                `).join('')}
            </div>
        `;
    }

    backdrop.classList.add('show');
    bottomSheet.classList.add('show');
    document.body.style.overflow = 'hidden';
}

// Isƒ±nma hareketleri olu≈ütur
function generateWarmup(workoutType) {
    const generalWarmup = [
        "5-10 dakika hafif kardiyo",
        "Dinamik esneme hareketleri"
    ];

    const specificWarmup = {
        'Full Body': ["Bodyweight squat 2x15", "Push-up 2x10", "Plank 30sn"],
        '√úst V√ºcut': ["Band pull-apart 2x15", "Arm circles 1dk", "Light press 2x12"],
        'Alt V√ºcut': ["Bodyweight lunge 2x10", "Leg swings 1dk", "Calf raise 2x15"],
        'G√∂ƒü√ºs': ["Wall push-up 2x15", "Chest stretch 30sn", "Light fly 2x12"],
        'Sƒ±rt': ["Band lat stretch 30sn", "Cat-camel 10 tekrar", "Pull-apart 2x15"],
        'Omuz': ["Arm circles 1dk", "Shoulder dislocates 10", "Light press 2x12"],
        'Bacak': ["Bodyweight squat 2x15", "Leg swings 10/side", "Calf raise 2x15"],
        'Kol': ["Wrist circles 30sn", "Light curl 2x12", "Light extension 2x12"],
        'Core': ["Cat-camel 10", "Dead bug 2x10/side", "Plank 30sn"]
    };

    return [...generalWarmup, ...(specificWarmup[workoutType] || ["Hafif tekrar setleri"])];
}

// Bottom sheet kapat
function closeBottomSheet() {
    const bottomSheet = document.getElementById('bottomSheet');
    const backdrop = document.getElementById('backdrop');

    backdrop.classList.remove('show');
    bottomSheet.classList.remove('show');
    document.body.style.overflow = '';

    document.querySelectorAll('.day-card').forEach(card => {
        card.classList.remove('active');
    });
}

// Toast mesajƒ±
function showToast(message, duration = 3000) {
    const toast = document.getElementById('toast');
    toast.textContent = message;
    toast.classList.add('show');

    setTimeout(() => {
        toast.classList.remove('show');
    }, duration);
}

// Program olu≈üturma
function generateNewProgram() {
    const generateBtn = document.getElementById('generateBtn');
    if (generateBtn) {
        generateBtn.disabled = true;
        generateBtn.innerHTML = '‚è≥ Program Olu≈üturuluyor...';
    }

    setTimeout(() => {
        createProgram();
        if (generateBtn) {
            generateBtn.disabled = false;
            generateBtn.innerHTML = 'üîÑ Yeni Program Olu≈ütur';
        }
    }, 1000);
}

// Program olu≈üturma
function createProgram() {
    try {
        const { sporGunleri, tecrube } = currentUser.profile;
        currentProgram = [];

        const maxZorluk = tecrube === 'baslangic' ? 2 : tecrube === 'orta' ? 3 : 4;

        if (!sporGunleri || sporGunleri.length === 0) {
            showToast('L√ºtfen antrenman g√ºnlerini ayarlayƒ±n');
            return;
        }

        if (sporGunleri.length <= 3) {
            // Full-body program
            sporGunleri.forEach(gun => {
                const egzersizler = [];

                ['gogus', 'sirt', 'omuz', 'bacak'].forEach(kasGrubu => {
                    const uygunEgzersizler = exerciseDB[kasGrubu].filter(e => e.zorluk <= maxZorluk);
                    shuffleArray(uygunEgzersizler);
                    egzersizler.push(uygunEgzersizler[0]);
                    if (Math.random() > 0.5 && uygunEgzersizler.length > 1) {
                        egzersizler.push(uygunEgzersizler[1]);
                    }
                });

                const coreEgzersizi = exerciseDB.core[Math.floor(Math.random() * 2)];
                egzersizler.push(coreEgzersizi);

                currentProgram.push({
                    gun: gun,
                    tip: 'Full Body',
                    egzersizler: egzersizler
                });
            });
        } else if (sporGunleri.length === 4) {
            // Upper/Lower split
            const upperDays = [sporGunleri[0], sporGunleri[2]];
            const lowerDays = [sporGunleri[1], sporGunleri[3]];

            upperDays.forEach(gun => {
                const egzersizler = [];
                ['gogus', 'sirt', 'omuz', 'kol'].forEach(kasGrubu => {
                    const uygunEgzersizler = exerciseDB[kasGrubu].filter(e => e.zorluk <= maxZorluk);
                    shuffleArray(uygunEgzersizler);
                    egzersizler.push(uygunEgzersizler[0]);
                });

                currentProgram.push({
                    gun: gun,
                    tip: '√úst V√ºcut',
                    egzersizler: egzersizler
                });
            });

            lowerDays.forEach(gun => {
                const egzersizler = [];
                const bacakEgzersizleri = exerciseDB.bacak.filter(e => e.zorluk <= maxZorluk);
                shuffleArray(bacakEgzersizleri);

                for (let i = 0; i < 3; i++) {
                    if (bacakEgzersizleri[i]) {
                        egzersizler.push(bacakEgzersizleri[i]);
                    }
                }

                shuffleArray(exerciseDB.core);
                egzersizler.push(exerciseDB.core[0]);
                egzersizler.push(exerciseDB.core[1]);

                currentProgram.push({
                    gun: gun,
                    tip: 'Alt V√ºcut',
                    egzersizler: egzersizler
                });
            });
        } else {
            // 5+ g√ºn - Kas grubu split
            const kasGruplari = ['gogus', 'sirt', 'omuz', 'bacak', 'kol'];
            sporGunleri.forEach((gun, index) => {
                const kasGrubu = kasGruplari[index % kasGruplari.length];
                const egzersizler = [];

                const uygunEgzersizler = exerciseDB[kasGrubu].filter(e => e.zorluk <= maxZorluk);
                shuffleArray(uygunEgzersizler);

                for (let i = 0; i < Math.min(4, uygunEgzersizler.length); i++) {
                    egzersizler.push(uygunEgzersizler[i]);
                }

                if (Math.random() > 0.5) {
                    const coreEgzersiz = exerciseDB.core[Math.floor(Math.random() * exerciseDB.core.length)];
                    egzersizler.push(coreEgzersiz);
                }

                currentProgram.push({
                    gun: gun,
                    tip: kasGrubu.charAt(0).toUpperCase() + kasGrubu.slice(1),
                    egzersizler: egzersizler
                });
            });
        }

        saveProgram();
        displayWeekView();
        showToast('üéâ Yeni program ba≈üarƒ±yla olu≈üturuldu!');
    } catch (error) {
        console.error('Program olu≈üturma hatasƒ±:', error);
        showToast('‚ùå Program olu≈üturulurken hata olu≈ütu');
    }
}

// Array karƒ±≈ütƒ±rma
function shuffleArray(array) {
    for (let i = array.length - 1; i > 0; i--) {
        const j = Math.floor(Math.random() * (i + 1));
        [array[i], array[j]] = [array[j], array[i]];
    }
    return array;
}

// Video g√∂sterme fonksiyonlarƒ±
async function showExerciseVideo(exerciseId, exerciseName) {
    const videoModal = document.getElementById('videoModal');
    const videoTitle = document.getElementById('videoTitle');
    const videoContent = document.getElementById('videoContent');
    const loadingSpinner = document.getElementById('videoLoading');

    // Modal'ƒ± a√ß ve loading g√∂ster
    videoModal.classList.add('show');
    videoTitle.textContent = `${exerciseName} - Video`;
    videoContent.style.display = 'none';
    loadingSpinner.style.display = 'block';

    try {
        // Egzersiz objesini bul (videoKey i√ßin)
        const exercise = findExerciseById(exerciseId);

        // Video bul
        const videoData = await youtubeManager.findExerciseVideo(exerciseName, exercise);

        loadingSpinner.style.display = 'none';
        videoContent.style.display = 'block';

        if (videoData.videoId && videoData.embedUrl) {
            // YouTube embed player
            videoContent.innerHTML = `
                <div class="video-player">
                    <iframe 
                        width="100%" 
                        height="280" 
                        src="${videoData.embedUrl}?autoplay=0&rel=0&modestbranding=1"
                        frameborder="0" 
                        allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" 
                        allowfullscreen>
                    </iframe>
                </div>
                <div class="video-info">
                    <h4>${videoData.title}</h4>
                    ${videoData.channelTitle ? `<p class="channel">Kanal: ${videoData.channelTitle}</p>` : ''}
                    <div class="video-actions">
                        <a href="${videoData.watchUrl}" target="_blank" class="watch-youtube-btn">
                            üé¨ YouTube'da ƒ∞zle
                        </a>
                        <button class="find-more-btn" onclick="findMoreVideos('${exerciseName}', ${exerciseId})">
                            üîç Daha Fazla Video
                        </button>
                    </div>
                </div>
            `;
        } else if (videoData.searchUrl) {
            // Arama sonucu
            videoContent.innerHTML = `
                <div class="no-video-found">
                    <div class="no-video-icon">üé•</div>
                    <h4>Video Bulunamadƒ±</h4>
                    <p>${exerciseName} i√ßin doƒürudan video bulamadƒ±m</p>
                    <div class="video-actions">
                        <a href="${videoData.searchUrl}" target="_blank" class="search-youtube-btn">
                            üîç YouTube'da Ara
                        </a>
                        <button class="ai-help-btn" onclick="askAIForVideo('${exerciseName}', ${exerciseId})">
                            ü§ñ AI'dan Yardƒ±m Al
                        </button>
                    </div>
                </div>
            `;
        }

        // Modal a√ßƒ±ldƒ±ktan sonra scroll'u engelle
        document.body.style.overflow = 'hidden';

    } catch (error) {
        loadingSpinner.style.display = 'none';
        videoContent.style.display = 'block';
        videoContent.innerHTML = `
            <div class="video-error">
                <div class="error-icon">‚ö†Ô∏è</div>
                <h4>Video Y√ºklenemedi</h4>
                <p>Baƒülantƒ± sorunu ya≈üanƒ±yor</p>
                <button onclick="retryVideoSearch('${exerciseName}', ${exerciseId})" class="retry-btn">
                    üîÑ Tekrar Dene
                </button>
            </div>
        `;
        console.error('Video y√ºkleme hatasƒ±:', error);
    }
}

function closeVideoModal() {
    const videoModal = document.getElementById('videoModal');
    const videoContent = document.getElementById('videoContent');

    videoModal.classList.remove('show');
    document.body.style.overflow = '';

    // Video iframe'ini temizle (otomatik oynatmayƒ± durdur)
    setTimeout(() => {
        videoContent.innerHTML = '';
    }, 300);
}

async function findMoreVideos(exerciseName, exerciseId = null) {
    let searchQuery = `${exerciseName} exercise tutorial form technique`;

    // Egzersiz ID'si varsa, videoKey'i kullan
    if (exerciseId) {
        const exercise = findExerciseById(exerciseId);
        if (exercise && exercise.videoKey) {
            searchQuery = `${exercise.videoKey} exercise tutorial form technique`;
        }
    }

    const youtubeSearchUrl = `https://www.youtube.com/results?search_query=${encodeURIComponent(searchQuery)}`;
    window.open(youtubeSearchUrl, '_blank');
}

async function askAIForVideo(exerciseName, exerciseId = null) {
    // Video bulunamadƒ±ƒüƒ±nda AI chat'i a√ß ve otomatik soru sor
    closeVideoModal();

    setTimeout(() => {
        let exercise = null;
        if (exerciseId) {
            exercise = findExerciseById(exerciseId);
        } else {
            exercise = findExerciseByName(exerciseName);
        }

        if (exercise) {
            currentExerciseContext = {
                exerciseId: exercise.id,
                gun: selectedDay,
                exercise: exercise
            };
            openChatModal();

            // Otomatik soru g√∂nder
            setTimeout(() => {
                const chatInput = document.getElementById('chatInput');
                chatInput.value = `${exerciseName} hareketini nasƒ±l yapacaƒüƒ±mƒ± anlat ve hangi videolara bakabilirim?`;
                sendChatMessage();
            }, 500);
        }
    }, 300);
}

async function retryVideoSearch(exerciseName, exerciseId = null) {
    // Cache'i temizle ve tekrar ara
    const cacheKey = exerciseName.toLowerCase();
    delete youtubeManager.cache[cacheKey];

    if (exerciseId) {
        showExerciseVideo(exerciseId, exerciseName);
    } else {
        const exercise = findExerciseByName(exerciseName);
        if (exercise) {
            showExerciseVideo(exercise.id, exerciseName);
        }
    }
}

function findExerciseByName(name) {
    for (const [grup, exercises] of Object.entries(exerciseDB)) {
        const found = exercises.find(e => e.isim === name);
        if (found) return { ...found, kasGrubu: grup };
    }
    return null;
}
function reportDifficult(exerciseId, gun) {
    currentExerciseContext = {
        exerciseId: exerciseId,
        gun: gun,
        exercise: findExerciseById(exerciseId)
    };
    openChatModal();
}

function findExerciseById(id) {
    for (const [grup, exercises] of Object.entries(exerciseDB)) {
        const found = exercises.find(e => e.id === id);
        if (found) return { ...found, kasGrubu: grup };
    }
    return null;
}

function openChatModal() {
    const modal = document.getElementById('aiChatModal');
    const chatMessages = document.getElementById('chatMessages');
    const chatInput = document.getElementById('chatInput');

    chatMessages.innerHTML = '';
    chatInput.value = '';

    addChatMessage('ai', `Merhaba! ${currentExerciseContext.exercise.isim} egzersizi ile ilgili nasƒ±l yardƒ±mcƒ± olabilirim?`, 'AI Ko√ß');

    modal.classList.add('show');
    chatInput.focus();
}

function closeChatModal() {
    document.getElementById('aiChatModal').classList.remove('show');
}

function addChatMessage(sender, message, apiProvider = null) {
    const chatMessages = document.getElementById('chatMessages');
    const messageDiv = document.createElement('div');
    messageDiv.className = `chat-message ${sender}`;

    const time = new Date().toLocaleTimeString('tr-TR', { hour: '2-digit', minute: '2-digit' });
    const formattedMessage = message.replace(/\n/g, ' ');

    const aiBadgeText = sender === 'ai' ?
        (apiProvider ? `ü§ñ ${apiProvider}` : 'ü§ñ AI Ko√ß') : '';

    messageDiv.innerHTML = `
        ${sender === 'ai' ? `<div class="ai-badge">${aiBadgeText}</div>` : ''}
        <div class="message-bubble">${formattedMessage}</div>
        <div class="message-time">${time}</div>
    `;

    chatMessages.appendChild(messageDiv);
    chatMessages.scrollTop = chatMessages.scrollHeight;
}

function handleChatKeyPress(event) {
    if (event.key === 'Enter' && !event.shiftKey) {
        event.preventDefault();
        sendChatMessage();
    }
}

async function sendChatMessage() {
    const chatInput = document.getElementById('chatInput');
    const message = chatInput.value.trim();

    if (!message) return;

    addChatMessage('user', message);
    chatInput.value = '';
    chatInput.disabled = true;
    document.querySelector('.chat-send-btn').disabled = true;

    showTypingIndicator();

    try {
        const analysis = await aiProvider.generateResponse(
            message,
            currentExerciseContext.exercise,
            currentUser.profile
        );

        removeTypingIndicator();
        addChatMessage('ai', analysis.response, aiProvider.lastUsedProvider);

        if (analysis.suggestions && analysis.suggestions.length > 0) {
            aiSuggestions = analysis.suggestions;
            showSuggestions(analysis.suggestions);
        }

    } catch (error) {
        removeTypingIndicator();
        addChatMessage('ai', '‚ùå Bir hata olu≈ütu. L√ºtfen tekrar deneyin.', 'Hata');
        console.error('Chat Error:', error);
    } finally {
        chatInput.disabled = false;
        document.querySelector('.chat-send-btn').disabled = false;
        chatInput.focus();
    }
}

function showTypingIndicator() {
    const chatMessages = document.getElementById('chatMessages');
    const typingDiv = document.createElement('div');
    typingDiv.className = 'chat-message ai';
    typingDiv.id = 'typingIndicator';

    typingDiv.innerHTML = `
        <div class="typing-indicator">
            <div class="typing-dot"></div>
            <div class="typing-dot"></div>
            <div class="typing-dot"></div>
        </div>
    `;

    chatMessages.appendChild(typingDiv);
    chatMessages.scrollTop = chatMessages.scrollHeight;
}

function removeTypingIndicator() {
    const indicator = document.getElementById('typingIndicator');
    if (indicator) {
        indicator.remove();
    }
}

function showSuggestions(suggestions) {
    const container = document.getElementById('suggestionContainer');
    if (!container) return;

    container.innerHTML = '';

    const suggestionListDiv = document.createElement('div');
    suggestionListDiv.className = 'suggestion-grid';

    suggestionListDiv.innerHTML = suggestions.map((sug, index) => `
        <div class="suggestion-card" onclick="selectSuggestion(${index})">
            <div class="suggestion-header">
                <div class="suggestion-exercise">${sug.isim}</div>
                <div class="suggestion-difficulty">${'‚≠ê'.repeat(sug.zorluk)}</div>
            </div>
            <div class="suggestion-body">
                <div class="suggestion-sets">${sug.set}</div>
                <div class="suggestion-equipment">${sug.ekipman || 'V√ºcut Aƒüƒ±rlƒ±ƒüƒ±'}</div>
                <div class="suggestion-reason">${sug.reason || 'AI √ñnerisi'}</div>
            </div>
            <div class="suggestion-footer">
                <button class="video-btn-small" onclick="event.stopPropagation(); showExerciseVideo(${sug.id}, '${sug.isim}')">
                    üé• Video
                </button>
                <button class="select-btn" onclick="event.stopPropagation(); selectSuggestion(${index})">
                    ${selectedSuggestions.includes(sug) ? '‚úì Se√ßildi' : 'Se√ß'}
                </button>
            </div>
        </div>
    `).join('');

    const actionButtons = document.createElement('div');
    actionButtons.className = 'suggestion-actions';

    actionButtons.innerHTML = `
        <button class="cancel-btn" onclick="closeSuggestions()">
            ƒ∞ptal
        </button>
        <button class="apply-btn" onclick="applySuggestions()" ${selectedSuggestions.length === 0 ? 'disabled' : ''}>
            Uygula (${selectedSuggestions.length})
        </button>
    `;

    container.appendChild(suggestionListDiv);
    container.appendChild(actionButtons);
    container.style.display = 'block';
}

function selectSuggestion(index) {
    const suggestion = aiSuggestions[index];
    const isSelected = selectedSuggestions.some(s => s.id === suggestion.id);

    if (isSelected) {
        selectedSuggestions = selectedSuggestions.filter(s => s.id !== suggestion.id);
    } else {
        selectedSuggestions = [...selectedSuggestions, suggestion];
    }

    // UI'ƒ± g√ºncelle
    const cards = document.querySelectorAll('.suggestion-card');
    cards.forEach((card, i) => {
        if (i === index) {
            card.classList.toggle('selected', !isSelected);
        }
        const selectBtn = card.querySelector('.select-btn');
        if (selectBtn) {
            selectBtn.textContent = selectedSuggestions.some(s => s.id === aiSuggestions[i].id) ? '‚úì Se√ßildi' : 'Se√ß';
        }
    });

    // Uygula butonunu g√ºncelle
    const applyBtn = document.querySelector('.apply-btn');
    if (applyBtn) {
        applyBtn.disabled = selectedSuggestions.length === 0;
        applyBtn.textContent = `Uygula (${selectedSuggestions.length})`;
    }
}

function closeSuggestions() {
    document.getElementById('suggestionContainer').style.display = 'none';
    selectedSuggestions = [];
}

function toggleSuggestion(index) {
    const items = document.querySelectorAll('.suggestion-item');
    const item = items[index];
    const suggestion = aiSuggestions[index];

    if (item.classList.contains('selected')) {
        item.classList.remove('selected');
        selectedSuggestions = [];
    } else {
        items.forEach(otherItem => otherItem.classList.remove('selected'));
        item.classList.add('selected');
        selectedSuggestions = [suggestion];
    }

    const applyBtn = document.querySelector('.apply-suggestions-btn');
    if (applyBtn) {
        applyBtn.disabled = selectedSuggestions.length === 0;
        applyBtn.innerHTML = selectedSuggestions.length === 0 ? '‚úÖ √ñneri Se√ß' : '‚úÖ Se√ßili √ñneriyi Uygula';
    }
}

function applySuggestions() {
    if (selectedSuggestions.length === 0) {
        showToast('‚ùå L√ºtfen en az bir √∂neri se√ßin');
        return;
    }

    const { gun, exerciseId } = currentExerciseContext;
    const dayProgram = currentProgram.find(p => p.gun === gun);

    if (!dayProgram) {
        showToast('‚ùå Program bulunamadƒ±');
        return;
    }

    // Eƒüer tek bir egzersiz i√ßin √∂neri se√ßildiyse (replace)
    if (exerciseId) {
        const exerciseIndex = dayProgram.egzersizler.findIndex(e => e.id === exerciseId);
        if (exerciseIndex === -1) {
            showToast('‚ùå Egzersiz bulunamadƒ±');
            return;
        }

        // Se√ßilen ilk √∂neriyle deƒüi≈ütir
        dayProgram.egzersizler[exerciseIndex] = selectedSuggestions[0];
    }
    // Eƒüer yeni egzersiz eklemek i√ßin √∂neri se√ßildiyse (add)
    else {
        dayProgram.egzersizler.push(...selectedSuggestions);
    }

    saveProgram();
    closeChatModal();
    closeSuggestions();
    displayWeekView();

    if (selectedDay === gun) {
        showBottomSheet(gun);
    }

    showToast('‚úÖ Program ba≈üarƒ±yla g√ºncellendi!');
    selectedSuggestions = [];
}

// Hƒ±zlƒ± yanƒ±t butonlarƒ±
function addQuickResponseButtons() {
    const quickResponses = [
        "Form nasƒ±l olmalƒ±?",
        "√áok kolay geldi",
        "√áok zor geliyor",
        "Aƒürƒ±m var",
        "Alternatif istiyorum",
        "Daha hafif olsun",
        "Daha aƒüƒ±r olsun",
        "Set sayƒ±sƒ±nƒ± deƒüi≈ütir",
        "Tekrar sayƒ±sƒ±nƒ± deƒüi≈ütir",
        "Ev versiyonu var mƒ±?",
        "Ekipman gerektirmeyen",
        "Sadece v√ºcut aƒüƒ±rlƒ±ƒüƒ±",
        "Ba≈ülangƒ±√ß seviyesi",
        "ƒ∞leri seviye",
        "Kas gruplarƒ±",
        "Nefes tekniƒüi",
        "Yaygƒ±n hatalar",
        "Isƒ±nma hareketleri"
    ];

    const chatContainer = document.querySelector('.chat-container');
    if (!chatContainer) return;

    const existingQuickResponse = chatContainer.querySelector('.quick-responses');
    if (existingQuickResponse) {
        existingQuickResponse.remove();
    }

    const quickResponseDiv = document.createElement('div');
    quickResponseDiv.className = 'quick-responses';
    quickResponseDiv.innerHTML = quickResponses.map(response =>
        `<button class="quick-response-btn" onclick="useQuickResponse('${response}')">${response}</button>`
    ).join('');

    const chatInputContainer = chatContainer.querySelector('.chat-input-container');
    chatContainer.insertBefore(quickResponseDiv, chatInputContainer);

    // Scroll zorla aktif et
    setTimeout(() => {
        const container = document.querySelector('.quick-responses');
        if (container) {
            container.style.overflowX = 'scroll';

            // Touch scroll
            let startX = 0;
            let scrollLeft = 0;

            container.addEventListener('touchstart', (e) => {
                startX = e.touches[0].pageX - container.offsetLeft;
                scrollLeft = container.scrollLeft;
            });

            container.addEventListener('touchmove', (e) => {
                if (!startX) return;
                const x = e.touches[0].pageX - container.offsetLeft;
                const walk = (x - startX) * 2;
                container.scrollLeft = scrollLeft - walk;
            });
        }
    }, 100);
}

function useQuickResponse(response) {
    const chatInput = document.getElementById('chatInput');
    chatInput.value = response;
    sendChatMessage();
}

// Mobil optimizasyonu
function optimizeMobileUI() {
    function setViewportHeight() {
        let vh = window.innerHeight * 0.01;
        document.documentElement.style.setProperty('--vh', `${vh}px`);
    }

    window.addEventListener('resize', setViewportHeight);
    setViewportHeight();

    const chatInput = document.getElementById('chatInput');
    if (chatInput) {
        chatInput.addEventListener('focus', () => {
            setTimeout(() => {
                chatInput.scrollIntoView({ behavior: 'smooth', block: 'center' });
            }, 300);
        });
    }
}

// Program kaydet
function saveProgram() {
    currentUser.takvim = currentProgram;
    const users = JSON.parse(localStorage.getItem('users') || '[]');
    const userIndex = users.findIndex(u => u.username === currentUser.username);

    if (userIndex !== -1) {
        users[userIndex] = currentUser;
        localStorage.setItem('users', JSON.stringify(users));
    }
}

// √áƒ±kƒ±≈ü yap
function logout() {
    localStorage.removeItem('currentUser');
    window.location.href = 'index.html';
}

// Event listeners
function initializeEventListeners() {
    let touchStartY = 0;
    let touchEndY = 0;

    const bottomSheet = document.getElementById('bottomSheet');
    if (bottomSheet) {
        bottomSheet.addEventListener('touchstart', e => {
            touchStartY = e.changedTouches[0].screenY;
        }, { passive: true });

        bottomSheet.addEventListener('touchend', e => {
            touchEndY = e.changedTouches[0].screenY;
            const deltaY = touchStartY - touchEndY;

            if (deltaY < -100) {
                closeBottomSheet();
            }
        }, { passive: true });
    }

    const aiChatModal = document.getElementById('aiChatModal');
    if (aiChatModal) {
        aiChatModal.addEventListener('click', function(e) {
            if (e.target === this) {
                closeChatModal();
            }
        });
    }

    const backdrop = document.getElementById('backdrop');
    if (backdrop) {
        backdrop.addEventListener('click', closeBottomSheet);
    }

    // Video modal
    const videoModal = document.getElementById('videoModal');
    if (videoModal) {
        videoModal.addEventListener('click', function(e) {
            if (e.target === this) {
                closeVideoModal();
            }
        });
    }

    document.addEventListener('keydown', function(e) {
        if (e.key === 'Escape') {
            if (document.getElementById('videoModal')?.classList.contains('show')) {
                closeVideoModal();
            } else if (document.getElementById('aiChatModal')?.classList.contains('show')) {
                closeChatModal();
            } else if (document.getElementById('bottomSheet')?.classList.contains('show')) {
                closeBottomSheet();
            }
        }
    });

    if (/iPad|iPhone|iPod/.test(navigator.userAgent)) {
        const setIOSViewport = () => {
            document.documentElement.style.setProperty('--vh', `${window.innerHeight * 0.01}px`);
        };

        window.addEventListener('resize', setIOSViewport);
        window.addEventListener('orientationchange', setIOSViewport);
        setIOSViewport();
    }
}

// ==========================================
// KOD SONU - SADELE≈ûTƒ∞Rƒ∞LMƒ∞≈û VERSƒ∞YON
// ==========================================
